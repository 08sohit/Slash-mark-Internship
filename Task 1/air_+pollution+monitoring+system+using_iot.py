# -*- coding: utf-8 -*-
"""Air +pollution+monitoring+system+using_IOT.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mzEzHf80vuix64eExY3fSr1SZZP1SZUx
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
# %matplotlib inline
import seaborn as sns
import datetime
import matplotlib.dates as md

df=pd.read_csv('monitoring.csv')
df.head()

df.drop("country",axis=1,inplace=True)
df.head()

#finding out the date & time when max. pollution occured at India
max_row = df[df['pollutant_max'] == df['pollutant_max'].max()]
max_time = max_row['last_update'].values[0]
print(f"The maximum pollution occurs at time: {max_time}")

#finding out the details of places when max. pollution occured at India
max_rows= df[df['pollutant_max'] == df['pollutant_max'].max()]

# Print all relevant details for each maximum value
for _, row in max_rows.iterrows():
    print(f"City: {row['city']}")
    print(f"Station: {row['station']}")
    print(f"Date & time: {row['last_update']}")
    print(f"Pollutant Average: {row['pollutant_avg']}")
    print(f"Max Value: {row['pollutant_max']} PPM\n")

#finding out pollution level at Byrnihat by hourly update
city_df = df[df['city'] == 'Byrnihat']

grouped = city_df.groupby('pollutant_id')

plt.figure(figsize=(12, 8))
plt.rcParams.update({'font.size': 15})

for pollutant_id, group in grouped:
    plt.plot(group['last_update'], group['pollutant_avg'], label=pollutant_id, marker='o', linestyle='')

plt.xlabel("Date & Hour")
plt.ylabel("Average Pollution Level")
plt.title(f"Hourly Average Pollution Levels in {'Byrnihat'} by Pollutant ID")
plt.grid(True)
plt.legend()
plt.show()

#finding out pollution level at Patna by hourly update
city_df = df[df['city'] == 'Patna']

grouped = city_df.groupby('pollutant_id')

plt.figure(figsize=(12, 8))
plt.rcParams.update({'font.size': 15})

for pollutant_id, group in grouped:
    plt.plot(group['last_update'], group['pollutant_avg'], label=pollutant_id, marker='o', linestyle='')

plt.xlabel("Date & Hour")
plt.ylabel("Average Pollution Level")
plt.title(f"Hourly Average Pollution Levels in {'Patna'} by Pollutant ID")
plt.grid(True)
plt.legend()
plt.show()

#finding out pollution level at Delhi by hourly update
city_df = df[df['city'] == 'Delhi']

grouped = city_df.groupby('pollutant_id')

plt.figure(figsize=(12, 8))
plt.rcParams.update({'font.size': 15})

for pollutant_id, group in grouped:
    plt.plot(group['last_update'], group['pollutant_avg'], label=pollutant_id, marker='o', linestyle='')

plt.xlabel("Date & Hour")
plt.ylabel("Average Pollution Level")
plt.title(f"Hourly Average Pollution Levels in {'Delhi'} by Pollutant ID")
plt.grid(True)
plt.legend()
plt.show()

#finding out pollution level at Sirsa by hourly update
city_df = df[df['city'] == 'Sirsa']

grouped = city_df.groupby('pollutant_id')

plt.figure(figsize=(12, 8))
plt.rcParams.update({'font.size': 15})

for pollutant_id, group in grouped:
    plt.plot(group['last_update'], group['pollutant_avg'], label=pollutant_id, marker='o', linestyle='')

plt.xlabel("Date & Hour")
plt.ylabel("Average Pollution Level")
plt.title(f"Hourly Average Pollution Levels in {'Sirsa'} by Pollutant ID")
plt.grid(True)
plt.legend()
plt.show()

#finding out pollution level all over India by hourly update
grouped = df.groupby('pollutant_id')

plt.figure(figsize=(12, 8))
plt.rcParams.update({'font.size': 15})

for pollutant_id, group in grouped:
    plt.plot(group['last_update'], group['pollutant_avg'], label=pollutant_id, marker='o', linestyle='')

plt.xlabel("Date & Hour")
plt.ylabel("Average Pollution Level")
plt.title("Hourly Average Pollution Levels by Pollutant ID")
plt.grid(True)
plt.legend()
plt.show()

#pairplotting
sns.set(font_scale=1.5)
g = sns.pairplot(df, hue="city")
g.fig.set_size_inches(15, 15)
plt.show()

plt.figure(figsize=(12, 8))
sns.barplot(x='city', y='pollutant_avg', hue='pollutant_id', data=df)
plt.xticks(rotation=45, ha='right')
plt.xlabel("City")
plt.ylabel("Average Pollution Level")
plt.title("Average Pollution Levels by City and Pollutant")
plt.legend(loc='best')
plt.tight_layout()
plt.show()

byrnihat_df = df[df['city'] == 'Byrnihat']
patna_df = df[df['city'] == 'Patna']

# Assuming 'pollutant_avg' is the column for average pollution level
sns.jointplot(x=byrnihat_df['pollutant_avg'], y=patna_df['pollutant_avg'], color='yellow')
plt.show()

patna_df = df[df['city'] == 'Patna']
delhi_df = df[df['city'] == 'Delhi']

# Assuming 'pollutant_avg' is the column for average pollution level
sns.jointplot(x=patna_df['pollutant_avg'], y=delhi_df['pollutant_avg'], color='orange')
plt.show()

delhi_df = df[df['city'] == 'Delhi']
sirsa_df = df[df['city'] == 'Sirsa']

# Assuming 'pollutant_avg' is the column for average pollution level
sns.jointplot(x=patna_df['pollutant_avg'], y=delhi_df['pollutant_avg'], color='indigo')
plt.show()

#Top Pollutants Bar Chart
# Group by pollutant ID and calculate mean pollution level
avg_pollutants = df.groupby('pollutant_id')['pollutant_avg'].mean()  # Replace 'pollutant_avg' with the actual column name

# Select top N pollutants
top_n = 5
top_pollutants = avg_pollutants.nlargest(top_n)

# Create bar chart
plt.figure(figsize=(10, 6))
plt.bar(top_pollutants.index, top_pollutants.values)
plt.xlabel("Pollutant")
plt.ylabel("Average Level")
plt.title(f"Top {top_n} Pollutants")
plt.xticks(rotation=45)
plt.show()

# Select only numeric columns
numerical_df = df.select_dtypes(include=['float', 'int'])

# Calculate correlation matrix
corr_matrix = numerical_df.corr()

# Create a heatmap
plt.figure(figsize=(10, 8))
sns.heatmap(corr_matrix, cmap='coolwarm', annot=True)
plt.title("Pollutant Correlation Heatmap")
plt.show()